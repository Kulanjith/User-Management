/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.baeldung;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Please describe your object */
@org.apache.avro.specific.AvroGenerated
public class info extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9032669302620933713L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"info\",\"namespace\":\"org.baeldung\",\"doc\":\"Please describe your object\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"ID from which this data can be uniquely identified\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of this data\",\"default\":\"\"},{\"name\":\"value\",\"type\":\"float\",\"doc\":\"A certain value this data contains\",\"default\":0},{\"name\":\"eventTime\",\"type\":\"long\",\"doc\":\"epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** ID from which this data can be uniquely identified */
  @Deprecated public java.lang.CharSequence id;
  /** Name of this data */
  @Deprecated public java.lang.CharSequence name;
  /** A certain value this data contains */
  @Deprecated public float value;
  /** epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html */
  @Deprecated public long eventTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public info() {}

  /**
   * All-args constructor.
   * @param id ID from which this data can be uniquely identified
   * @param name Name of this data
   * @param value A certain value this data contains
   * @param eventTime epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html
   */
  public info(java.lang.CharSequence id, java.lang.CharSequence name, java.lang.Float value, java.lang.Long eventTime) {
    this.id = id;
    this.name = name;
    this.value = value;
    this.eventTime = eventTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return value;
    case 3: return eventTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: value = (java.lang.Float)value$; break;
    case 3: eventTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return ID from which this data can be uniquely identified
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * ID from which this data can be uniquely identified
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of this data
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name of this data
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return A certain value this data contains
   */
  public java.lang.Float getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * A certain value this data contains
   * @param value the value to set.
   */
  public void setValue(java.lang.Float value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html
   */
  public java.lang.Long getEventTime() {
    return eventTime;
  }

  /**
   * Sets the value of the 'eventTime' field.
   * epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html
   * @param value the value to set.
   */
  public void setEventTime(java.lang.Long value) {
    this.eventTime = value;
  }

  /**
   * Creates a new info RecordBuilder.
   * @return A new info RecordBuilder
   */
  public static org.baeldung.info.Builder newBuilder() {
    return new org.baeldung.info.Builder();
  }

  /**
   * Creates a new info RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new info RecordBuilder
   */
  public static org.baeldung.info.Builder newBuilder(org.baeldung.info.Builder other) {
    return new org.baeldung.info.Builder(other);
  }

  /**
   * Creates a new info RecordBuilder by copying an existing info instance.
   * @param other The existing instance to copy.
   * @return A new info RecordBuilder
   */
  public static org.baeldung.info.Builder newBuilder(org.baeldung.info other) {
    return new org.baeldung.info.Builder(other);
  }

  /**
   * RecordBuilder for info instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<info>
    implements org.apache.avro.data.RecordBuilder<info> {

    /** ID from which this data can be uniquely identified */
    private java.lang.CharSequence id;
    /** Name of this data */
    private java.lang.CharSequence name;
    /** A certain value this data contains */
    private float value;
    /** epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html */
    private long eventTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.baeldung.info.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[3].schema(), other.eventTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing info instance
     * @param other The existing instance to copy.
     */
    private Builder(org.baeldung.info other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[3].schema(), other.eventTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * ID from which this data can be uniquely identified
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * ID from which this data can be uniquely identified
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.baeldung.info.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * ID from which this data can be uniquely identified
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * ID from which this data can be uniquely identified
      * @return This builder.
      */
    public org.baeldung.info.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Name of this data
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name of this data
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.baeldung.info.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of this data
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of this data
      * @return This builder.
      */
    public org.baeldung.info.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * A certain value this data contains
      * @return The value.
      */
    public java.lang.Float getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * A certain value this data contains
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.baeldung.info.Builder setValue(float value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * A certain value this data contains
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * A certain value this data contains
      * @return This builder.
      */
    public org.baeldung.info.Builder clearValue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTime' field.
      * epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html
      * @return The value.
      */
    public java.lang.Long getEventTime() {
      return eventTime;
    }

    /**
      * Sets the value of the 'eventTime' field.
      * epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public org.baeldung.info.Builder setEventTime(long value) {
      validate(fields()[3], value);
      this.eventTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * epoch time when the event occurred. See https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html
      * @return This builder.
      */
    public org.baeldung.info.Builder clearEventTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public info build() {
      try {
        info record = new info();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.Float) defaultValue(fields()[2]);
        record.eventTime = fieldSetFlags()[3] ? this.eventTime : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
